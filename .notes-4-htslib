http://samtools.sourceforge.net/
http://www.htslib.org/
https://github.com/samtools/htslib

Requirements
============

Building HTSlib requires a few programs and libraries to be present.
See the "System Specific Details" below for guidance on how to install
these.

At least the following are required:

    GNU make
    C compiler (e.g. gcc or clang)

In addition, building the configure script requires:

    autoheader
    autoconf

Running the configure script uses awk, along with a number of
standard UNIX tools (cat, cp, grep, mv, rm, sed, among others).  Almost
all installations will have these already.

Running the test harness (>> make test) uses:

    bash
    perl

HTSlib uses the following external libraries.  Building requires both the
library itself, and include files needed to compile code that uses functions
from the library.  Note that some Linux distributions put include files in
a development ('-dev' or '-devel') package separate from the main library.

>>    zlib       (required)
>>    libbz2     (required, unless configured with --disable-bz2)
>>    liblzma    (required, unless configured with --disable-lzma)
>>    libcurl    (optional, but strongly recommended)
    libcrypto  (optional for Amazon S3 support; not needed on MacOS)

>> # sudo port install zlib
>> # sudo port install bzip2
>> # sudo port install lzma
>> # sudo port install curl

Disabling libbzip2 and liblzma will make some CRAM files unreadable, so
is not recommended.

Using libcurl provides HTSlib with better network protocol support, for
example it enables the use of https:// URLs.  It is also required if
direct access to Amazon S3 or Google Cloud Storage is enabled.

Amazon S3 support requires an HMAC function to calculate a message
authentication code.  On MacOS, the CCHmac function from the standard
library is used.  Systems that do not have CChmac will get this from
libcrypto.  libcrypto is part of OpenSSL or one of its derivatives (LibreSSL
or BoringSSL).

On Microsoft Windows we recommend use of Mingw64/Msys2.  Note that
currently for the test harness to work you will need to override the
test temporary directory with e.g.: make check TEST_OPTS="-t C:/msys64/tmp/_"
Whilst the code may work on Windows with other environments, these have
not be verified.

Building Configure
==================

This step is only needed if configure.ac has been changed, or if configure
does not exist (for example, when building from a git clone).  The
configure script and config.h.in can be built by running:

    autoheader
    autoconf

If you have a full GNU autotools install, you can alternatively run:

>>    autoreconf

Basic Installation
==================

To build and install HTSlib, 'cd' to the htslib-1.x directory containing
the package's source and type the following commands:

>>    ./configure
>>    make
    make install

The './configure' command checks your build environment and allows various
optional functionality to be enabled (see Configuration below).  If you
don't want to select any optional functionality, you may wish to omit
configure and just type 'make; make install' as for previous versions
of HTSlib.  However if the build fails you should run './configure' as
it can diagnose the common reasons for build failures.

The 'make' command builds the HTSlib library and and various useful
utilities: bgzip, htsfile, and tabix.  If compilation fails you should
run './configure' as it can diagnose problems with your build environment
that cause build failures.

The 'make install' command installs the libraries, library header files,
utilities, several manual pages, and a pkgconfig file to /usr/local.
The installation location can be changed by configuring with --prefix=DIR
or via '>> make prefix=DIR install' (see Installation Locations below).

>> make install prefix=~/Projects/Addgene/addgene-bioinformatics/local
